#!/usr/bin/env zsh

#######################################################################
#                               ZSHENV                                #
#######################################################################

###############################
#  Platform-specific Sources  #
###############################

# Determine platform first
if [[ -z ${ZSH_UNAME} ]]; then
  ZSH_UNAME=$(uname)
  export ZSH_UNAME
fi

if [[ -f "$__zsh_config_dir/zshenv_$ZSH_UNAME" ]]; then
  source "$__zsh_config_dir/zshenv_$ZSH_UNAME"
fi

##########################
#  Personal Preferences  #
##########################

export EDITOR=nvim
export LANG=en_US.UTF-8
export COLORFGBG="7;0"

####################
#  Personal Paths  #
####################

if [[ -d "$HOME/bin" ]]; then
  path=($HOME/bin $path)
fi

if [[ -d "$HOME/local/bin" ]]; then
  path=($HOME/local/bin $path)
fi

if [[ -d "$HOME/.local/bin" ]]; then
  path=($HOME/.local/bin $path)
fi

##########
#  Tmux  #
##########

export TMUX_PLUGIN_MANAGER_PATH="$XDG_DATA_HOME/tmux/plugins"
if [[ ! -d "$TMUX_PLUGIN_MANAGER_PATH" ]]; then
  mkdir -p -- "TMUX_PLUGIN_MANAGER_PATH"
fi

###############
#  Dircolors  #
###############

if (( $+commands[dircolors] )); then
  eval "$(dircolors)"
  combined_colors="$LS_COLORS"
  for file in "$HOME"/.dircolors*(N); do
    if [[ -f $file ]]; then
      eval "$(dircolors --sh "$file")"
      combined_colors+=":$LS_COLORS"
    fi
  done
  export LS_COLORS="${combined_colors%:}"
  unset combined_colors file
fi

#####################
#  C-Include Paths  #
#####################

# Prevent pkg-config from omitting paths in C_INCLUDE_PATH
export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1

if (( $+commands[pkg-config] )); then
  if pkg-config --exists libpcre; then
    C_INCLUDE_PATH="$(pkg-config --variable=includedir libpcre):$C_INCLUDE_PATH"
  fi
  if pkg-config --exists gsl; then
    C_INCLUDE_PATH="$(pkg-config --variable=includedir gsl):$C_INCLUDE_PATH"
  fi
fi

if (( $+commands[ocamlc] )); then
  C_INCLUDE_PATH="$(ocamlc -where):$C_INCLUDE_PATH"
fi

export C_INCLUDE_PATH

##########
#  Rust  #
##########

export CARGO_HOME="$XDG_DATA_HOME/cargo"

if [[ -f "$CARGO_HOME/env" ]]; then
  source "$CARGO_HOME/env"
fi

 export RUSTUP_HOME="$XDG_DATA_HOME/rustup"

###########
#  OCaml  #
###########

export OPAMROOT="$XDG_DATA_HOME/opam"

if [[ -f "$OPAMROOT/opam-init/init.zsh" ]]; then
  source "$OPAMROOT/opam-init/init.zsh" >/dev/null 2>/dev/null || true
fi

#############
#  Haskell  #
#############

export GHCUP_USE_XDG_DIRS=true

############
#  Python  #
############

export PYENV_ROOT="$XDG_DATA_HOME/pyenv"

[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"

if (( $+commands[pyenv] )); then
  eval "$(pyenv init - zsh)"
fi

################
#  JavaScript  #
################

export NPM_CONFIG_USERCONFIG="$XDG_CONFIG_HOME/npm/npmrc"

##########
#  Ruby  #
##########

export GEM_HOME="$XDG_DATA_HOME/gem"
export GEM_SPEC_CACHE="$XDG_CACHE_HOME/gem"

############
#  Gradle  #
############

export GRADLE_USER_HOME="$XDG_DATA_HOME/gradle"

############
#  Docker  #
############

# TODO: activate once Docker Desktop supports this
# export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"

export DOCKER_CONFIG="$HOME/.docker"

if [[ -d "$DOCKER_CONFIG/bin" ]]; then
  path=($DOCKER_CONFIG/bin $path)
fi

#############
#  Ansible  #
#############

export ANSIBLE_HOME="$XDG_DATA_HOME/ansible"
export ANSIBLE_HOST_KEY_CHECKING=False

############
#  Unison  #
############

export UNISON="$XDG_DATA_HOME/unison"

###########
#  GNUPG  #
###########

export GNUPGHOME="$XDG_DATA_HOME/gnupg"

##########
#  TLDR  #
##########

export TLDR_CACHE_DIR="$XDG_CACHE_HOME/tldr"

#########################
#  Save PATH on Darwin  #
#########################

# Necessary on macOS due to Apple path_helper path manipulation
if [[ $ZSH_UNAME == "Darwin" ]]; then
  export ORIGINAL_PATH=$PATH
fi
